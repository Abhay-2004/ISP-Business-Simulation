package edu.iastate.cs228.hw1;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;



/**
 * The ISPBusiness class contains methods to manipulate and analyze Town objects,
 * simulating the workings of an ISP business over a year. It includes methods to update
 * the town grid, calculate the business profit based on the number of casual cells in the grid,
 * and a main method to facilitate user interaction through the console for input and configuration
 * of the town grid.
 * 
 * @author Abhay Prasanna Rao
 */
public class ISPBusiness {
    
    /**
     * Updates the state of each cell in the given town grid based on the rules defined
     * in each specific TownCell's next() method, and returns the new updated grid.
     *
     * @param town_names the old town grid
     * @return the new updated town grid
     */
    public static Town updatePlain(Town town_names) {
        Town tNew = new Town(town_names.getLength(), town_names.getWidth());

        for(int x = 0; x < town_names.getWidth(); x++) {
            for(int y = 0; y < town_names.getLength(); y++) {
                tNew.grid[x][y] = town_names.grid[x][y].next(tNew);
            }
        }
        return tNew;
    }
    
    /**
     * Calculates the profit generated by the ISP business based on the number of 
     * casual cells present in the town grid.
     *
     * @param town the town grid
     * @return the profit calculated as the number of casual cells
     */
    public static int getProfit(Town town) {
        int profit_variable = 0;

        for(int x = 0; x < town.getWidth(); x++) {
            for(int y = 0; y < town.getLength(); y++) {
                if(town.grid[x][y].who() == State.CASUAL) {
                    profit_variable += 1;
                }
            }
        }
        return profit_variable;
    }
    
    /**
     * The main method to run the simulation. It allows users to input configurations
     * for the town grid either by specifying a file path or by providing dimensions and
     * a seed for random initialization. It then simulates the ISP business operation over 
     * a year (12 iterations) and calculates the average profit as a percentage of the total possible profit.
     *
     */
	

	public static void main(String []args) {
		Town current_town = null;
		Scanner scan = new Scanner(System.in);
		System.out.println("How to populate grid (type 1 or 2): 1: from a file. 2: randomly with seed");
		int choice = scan.nextInt();
		if (choice == 1) {
		    String filePath = "";
		    try {
		        //ask for file path and calls Town constructor with file updating
		        System.out.println("Please Enter The File Name or Path!");
		        scan.nextLine();
		        filePath = scan.nextLine();

		        current_town = new Town(filePath);
		    }
		    catch (FileNotFoundException e) {
		        System.out.println("Invalid file name/link" + e.toString());
		        return; 
		    }
		}



		if(choice == 2)
		{
			int seed,row,col;
			System.out.println("Provide rows, cols and seed integer separated by space:");
			row = scan.nextInt();
			col = scan.nextInt();
			seed = scan.nextInt();
			current_town = new Town(row,col);

			current_town.randomInit(seed);

		}

		double profit = 0.0;
		for (int i = 0; i < 12; i++) {
			profit += (getProfit(current_town) / ((double)current_town.getWidth() * (double)current_town.getLength())) * 100;
			current_town = updatePlain(current_town);
		}
		profit = profit/12;
		System.out.printf("%.2f%c",profit, '%');

	}
}